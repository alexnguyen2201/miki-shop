// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: product.sql

package db

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  product_type_id,
  title,
  price,
  size_id,
  color_id,
  stock,
  quantity_sold,
  rating
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, product_type_id, title, price, color_id, size_id, stock, quantity_sold, rating, created_at, updated_at, created_by, updated_by, discount
`

type CreateProductParams struct {
	ProductTypeID int64         `json:"product_type_id"`
	Title         string        `json:"title"`
	Price         int64         `json:"price"`
	SizeID        sql.NullInt64 `json:"size_id"`
	ColorID       sql.NullInt64 `json:"color_id"`
	Stock         int64         `json:"stock"`
	QuantitySold  int64         `json:"quantity_sold"`
	Rating        int32         `json:"rating"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ProductTypeID,
		arg.Title,
		arg.Price,
		arg.SizeID,
		arg.ColorID,
		arg.Stock,
		arg.QuantitySold,
		arg.Rating,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ProductTypeID,
		&i.Title,
		&i.Price,
		&i.ColorID,
		&i.SizeID,
		&i.Stock,
		&i.QuantitySold,
		&i.Rating,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Discount,
	)
	return i, err
}

const deleteProductB = `-- name: DeleteProductB :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProductB(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProductB, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, product_type_id, title, price, color_id, size_id, stock, quantity_sold, rating, created_at, updated_at, created_by, updated_by, discount FROM products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ProductTypeID,
		&i.Title,
		&i.Price,
		&i.ColorID,
		&i.SizeID,
		&i.Stock,
		&i.QuantitySold,
		&i.Rating,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Discount,
	)
	return i, err
}

const getProductForUpdate = `-- name: GetProductForUpdate :one
SELECT id, product_type_id, title, price, color_id, size_id, stock, quantity_sold, rating, created_at, updated_at, created_by, updated_by, discount FROM products
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetProductForUpdate(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductForUpdate, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ProductTypeID,
		&i.Title,
		&i.Price,
		&i.ColorID,
		&i.SizeID,
		&i.Stock,
		&i.QuantitySold,
		&i.Rating,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Discount,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, product_type_id, title, price, color_id, size_id, stock, quantity_sold, rating, created_at, updated_at, created_by, updated_by, discount FROM products
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ProductTypeID,
			&i.Title,
			&i.Price,
			&i.ColorID,
			&i.SizeID,
			&i.Stock,
			&i.QuantitySold,
			&i.Rating,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.Discount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET title = $2
WHERE id = $1
RETURNING id, product_type_id, title, price, color_id, size_id, stock, quantity_sold, rating, created_at, updated_at, created_by, updated_by, discount
`

type UpdateProductParams struct {
	ID    int64  `json:"id"`
	Title string `json:"title"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct, arg.ID, arg.Title)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ProductTypeID,
		&i.Title,
		&i.Price,
		&i.ColorID,
		&i.SizeID,
		&i.Stock,
		&i.QuantitySold,
		&i.Rating,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Discount,
	)
	return i, err
}
